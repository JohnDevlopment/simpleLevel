#!/bin/bash
# execute using wish \
exec wish "$0"

# now using tcl and tk

font create TkTextAlt -family Expressway -size 10

# global variables
set f    .lf1
set ff   .lf2
set fff  .lf3

set filetypes [list \
 [list {Level Files} {.dat .DAT}] \
 [list {All Files} *]]

set dir [pwd]
set FILE ""

# window manager
wm title . {Change Level Header Settings}

# all three label-frames
ttk::labelframe .lf1 -text {Choose File to Edit}
ttk::labelframe .lf2 -text {Level Width, Height, and Number of Tiles}
ttk::labelframe .lf3 -text {Edit Header Details}
ttk::labelframe .lf4 -text {Create New Level}

# label-frame 1
ttk::entry $f.en1 -font TkTextAlt -background white -state readonly
ttk::button $f.bt1 -text Open -command [subst -nocommands {
	set FILE [tk_getOpenFile -filetypes \$filetypes -initialdir \$dir -parent .]
	
	if {\$FILE ne ""} {
	  lassign [read_level_header \$FILE] width height background_id tileset_id music_id num_tiles
	  insert_delete $f.en1 \$FILE
	  insert_delete $ff.tx1 "Header\nWIDTH\t= \$width tiles\nHEIGHT\t= \$height tiles\n\$num_tiles tiles in level"
	  
	  insert_delete $fff.sb1 \$background_id
	  insert_delete $fff.sb2 \$tileset_id
	  insert_delete $fff.sb3 \$music_id
	  
	  set dir [file dirname \$FILE]
	  
	  unset width height background_id tileset_id music_id num_tiles
	}
}]

# label-frame 2
text $ff.tx1 -state disabled -background white -height 4 -font TkTextAlt

# label-frame 3
set x 0
foreach wgt [list $fff.sb1 $fff.sb2 $fff.sb3] text {Background Tileset Music} {
	ttk::spinbox $wgt -from 0 -to 255 -increment 1 -state readonly
	$wgt set 0
	ttk::label "$fff.lb[incr x]" -text $text
}

ttk::button $fff.bt1 -text Save -command [subst -nocommands {
	if {\$FILE == ""} {
	  tk_messageBox -icon "error" -parent . -title "Application Error" \
	  	-message "No file currently loaded" -type ok
	  
	  return
	}
	
	write_level_header \$FILE [$fff.sb1 get] [$fff.sb2 get] [$fff.sb3 get]
}]

# render all widgets visible
pack $f $ff $fff -side top -fill x
pack $f.en1 $f.bt1 -fill x
pack $ff.tx1 -fill x

grid $fff.sb1 $fff.lb1
grid $fff.sb2 $fff.lb2
grid $fff.sb3 $fff.lb3
grid $fff.bt1 - -sticky ew

# end of packing order

bind . <Escape> exit

bind TSpinbox <<Increment>> {+
	selection clear -displayof %W
}

bind TSpinbox <<Decrement>> {+
	selection clear -displayof %W
}

unset f ff fff wgt text x

# processes
# command defined: c_ReadHeader
proc insert_delete {wgt {text ""}} {
	if {[winfo class $wgt] eq "TEntry"} {
	  tailcall _insert_delete_entry $wgt $text
	} \
	elseif {[winfo class $wgt] eq "Text"} {
	  tailcall _insert_delete_textfield $wgt $text
	} \
	elseif {[winfo class $wgt] eq "TSpinbox"} {
	  if {$text == ""} {set text 0}
	  tailcall _insert_delete_spinbox $wgt $text
	}
	
return -code 1 "$wgt is not a themed entry widget nor is it a text widget."
}

proc _insert_delete_textfield {wgt text} {
	if {$text != ""} {
	  $wgt configure -state normal
	  $wgt delete 1.0 end
	  $wgt insert 1.0 $text
	  $wgt configure -state disabled
	}
	
return
}

proc _insert_delete_entry {wgt text} {
	if {$text != ""} {
	  $wgt state !readonly
	  $wgt delete 0 end
	  $wgt insert 0 $text
	  $wgt state readonly
	}
	
return
}

proc _insert_delete_spinbox {wgt val} {
	if {$val != ""} {
	  $wgt state !readonly
	  $wgt set $val
	  $wgt state readonly
	}
	
return
}

proc read_level_header _file {
	if {! [file exists $_file]} {
	  return -code 1 "$_file does not exist"
	}
	
return [ReadHeader $_file]
}

proc write_level_header {_file _bgid _tileset_id _music_id} {
	set fs_exist [file exists $_file]
	set retval -1
	
	set debug_cmd {tk_messageBox -parent . -icon "info" -type ok -title {Event Pause} \
	-message "This dialog box is simply to pause events in the procedure. Pay this no mind."}
	
	# file not exist
	if {! $fs_exist} {
	  return -code 1 "$_file does not exist"
	}
	
	# temporary file; delete it and save its directory
	set id [file tempfile fout]
	set fs_tmpdir [file dirname $fout]
	close $id
	
	file delete $fout
	unset fout id
	
	# copy level file to temp directory
	file copy -force $_file $fs_tmpdir/
	
	# attempt to write to file
	set code [catch {
	  set retval [WriteHeader $_file $_bgid $_tileset_id $_music_id]
	} err]
	
	# error returned by function
	if {$code} {
	  tk_messageBox -parent . -icon "error" -type ok -title {Error Returned From c_WriteHeader} \
	  	-message $err
	  
	  catch {file delete $_file}
	  file copy $fs_tmpdir/$_file [pwd]/
	}
	
	file delete -force $fs_tmpdir/$_file
	
return $retval
}
